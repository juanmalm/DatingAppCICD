steps:

- task: UseDotNet@2
  displayName: '[Test aceptación 1/8]: Instalar SDK .NET'
  inputs:
    packageType: 'sdk'
    version: '7.0.100'

# Desplegar entorno test
- task: TerraformInstaller@0
  displayName: 'Install Terraform'
  inputs:
    terraformVersion: 1.3.7

- task: TerraformCLI@0
  displayName: 'Run terraform init'
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/.azpipelines/terraform'

- task: TerraformCLI@0
  displayName: 'terraform apply'
  inputs:
    command: 'apply'
    environmentServiceName: 'Azure TFM'
    providerAzureRmSubscriptionId: '$(SubscriptionId)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/.azpipelines/terraform'
    commandOptions: '-var="image_id=/subscriptions/$(SubscriptionId)/resourceGroups/$(ResourceGroupName)/providers/Microsoft.Compute/images/DatingApp_$(Build.BuildNumber)"'

- task: TerraformCLI@0
  displayName: 'terraform output'
  inputs:
    command: output
    workingDirectory: '$(System.DefaultWorkingDirectory)/.azpipelines/terraform'

# Smoke test
- task: PowerShell@2
  displayName: '[Test aceptación 8/9]: Smoke test'
  inputs:
    targetType: 'inline'
    script: 'Invoke-WebRequest -URI http://$(TF_OUT_VM_IP):8080'

# Test unitarios
- task: DotNetCoreCLI@2
  displayName: '[Test aceptación 9/9]: Ejecución y publicación de los test'
  inputs:
    command: 'test'
    projects: 'API.AcceptanceTests/API.AcceptanceTests.csproj'

- task: TerraformCLI@0
  displayName: 'terraform destroy'
  inputs:
    command: 'destroy'
    environmentServiceName: 'Azure TFM'
    providerAzureRmSubscriptionId: '$(SubscriptionId)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/.azpipelines/terraform'