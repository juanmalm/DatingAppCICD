trigger:
- main

pool:
  vmImage: windows-2022

stages:

# Etapa de commit. Incluye los procesos de compilación, test unitarios, evaluación del código y empaquetado
- stage: Etapa_Commit
  jobs:

  # Job para el cliente en Angular
  - job: Cliente_Angular
    steps:

    # Compilación
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: '[Compilación 1/2]: Instalar Node.js'

    - script: |
        call npm install -g @angular/cli
        call npm install --legacy-peer-deps
        call ng build
      workingDirectory: $(Build.SourcesDirectory)/client
      displayName: '[Compilación 2/2]: Compilación'

    # Test unitarios
    - script: |
        call ng test --no-watch --reporters=junit
        exit 0
      workingDirectory: $(Build.SourcesDirectory)/client
      displayName: '[Test unitarios 1/2]: Ejecución de los test'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '$(Build.SourcesDirectory)/client/test-results.xml'
        failTaskOnFailedTests: true
      displayName: '[Test unitarios 2/2]: Publicación de resultados'

    # Empaquetado
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/API/wwwroot'
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/cliente_$(Build.BuildId).zip'
      displayName: '[Empaquetado 1/2]: Empaquetado'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'Cliente'
      displayName: '[Empaquetado 2/2]: Publicación de artefacto'

  # Job para el API en .NET
  - job: API_NET
    steps:

    # Compilación
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '7.0.100'
      displayName: '[Compilación 1/2]: Instalar SDK .NET'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'API/API.csproj'
        arguments: '-c Release'
      displayName: '[Compilación 2/2]: Compilación'

    # Test unitarios
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'API.UnitTests/API.UnitTests.csproj'
      displayName: '[Test unitarios 1/1]: Ejecución y publicación de los test'

    # Empaquetado
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: 'API/API.csproj'
        arguments: '-c Release -o $(Build.ArtifactStagingDirectory)/API_$(Build.BuildId)'
        publishWebProjects: false
        zipAfterPublish: true
      displayName: '[Empaquetado 1/2]: Empaquetado'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/API_$(Build.BuildId)'
        artifactName: 'API'
      displayName: '[Empaquetado 2/2]: Publicación de artefacto'

  # Job para análisis y calidad del código de todo el proyecto
  - job: Calidad_Codigo
    steps:

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri https://github.com/github/codeql-action/releases/latest/download/codeql-bundle-win64.tar.gz -OutFile .\codeql-bundle-win64.tar.gz
          tar -xvzf .\codeql-bundle-win64.tar.gz
      displayName: '[Evaluación y calidad del código 1/5]: Descarga de CodeQL'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          mkdir ./codeql-dbs
          .\codeql\codeql database create ./codeql-dbs/repo-multi --db-cluster --language=csharp,javascript --no-run-unnecessary-builds --source-root .
          .\codeql\codeql database analyze ./codeql-dbs/repo-multi/csharp csharp-security-and-quality.qls --sarif-category=csharp --format=sarif-latest --output=./codeql-dbs/repo-multi/csharp-security-and-quality.sarif
          .\codeql\codeql database analyze ./codeql-dbs/repo-multi/javascript javascript-security-and-quality.qls --sarif-category=javascript --format=sarif-latest --output=./codeql-dbs/repo-multi/javascript-security-and-quality.sarif
      displayName: '[Evaluación y calidad del código 2/5]: Análisis CodeQL'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          .\codeql\codeql github upload-results --repository=juanmalm/DatingAppCICD --ref=refs/heads/main --sarif=./codeql-dbs/repo-multi/csharp-security-and-quality.sarif
          .\codeql\codeql github upload-results --repository=juanmalm/DatingAppCICD --ref=refs/heads/main --sarif=./codeql-dbs/repo-multi/javascript-security-and-quality.sarif
      env:
        GITHUB_TOKEN: $(ghtoken)
      displayName: '[Evaluación y calidad del código 3/5]: Publicación resultados en GitHub'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/codeql-dbs/repo-multi/csharp-security-and-quality.sarif'
        artifactName: 'AnalisisCodigo'
      displayName: '[Evaluación y calidad del código 4/5]: Publicación de artefacto de resultados de C#'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/codeql-dbs/repo-multi/javascript-security-and-quality.sarif'
        artifactName: 'AnalisisCodigo'
      displayName: '[Evaluación y calidad del código 5/5]: Publicación de artefacto de resultados de Javascript'